import { GoogleGenAI, Type, Modality } from "@google/genai";
import { AISuggestion, OutfitItem } from '../types';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

// --- OUTFIT SUGGESTIONS ---
const suggestionsSchema = {
    type: Type.ARRAY,
    items: {
      type: Type.OBJECT,
      properties: {
        id: { type: Type.STRING },
        title: { type: Type.STRING },
        reason: { type: Type.STRING },
        items: {
          type: Type.ARRAY,
          items: {
            type: Type.OBJECT,
            properties: {
              name: { type: Type.STRING },
              category: { type: Type.STRING, enum: ['top', 'bottom', 'dress', 'outerwear', 'accessory', 'shoes', 'jewelry', 'watch', 'hairstyle'] }
            }
          }
        }
      }
    }
};

export const getOutfitSuggestions = async (base64Image: string, wardrobe: OutfitItem[]): Promise<AISuggestion[]> => {
    const wardrobeDescription = wardrobe.map(item => `'${item.name}' (${item.category})`).join(', ');
    
    const prompt = `You are an AI fashion stylist. A user has uploaded an image of a new clothing item. Their existing wardrobe contains: [${wardrobeDescription}]. 
    Analyze the uploaded item and suggest three complete, stylish outfits that incorporate it along with items from their existing wardrobe. Also suggest add-ons like jewelry, watches, shoes, and hairstyles if they fit. For each outfit, provide a title, a brief reason why it works, and a list of the other items needed.
    IMPORTANT: The item names in the 'items' array MUST EXACTLY MATCH the item names provided in their existing wardrobe. Do not invent new items. If the uploaded item is new, give it a descriptive name.
    Respond in the requested JSON format.`;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: {
            parts: [
                { inlineData: { mimeType: 'image/jpeg', data: base64Image } },
                { text: prompt },
            ]
        },
        config: {
            responseMimeType: "application/json",
            responseSchema: suggestionsSchema,
        },
    });

    const jsonText = response.text.trim();
    const suggestions = JSON.parse(jsonText) as Omit<AISuggestion, 'id'>[];
    return suggestions.map(s => ({ ...s, id: crypto.randomUUID() }));
};

// --- VIRTUAL TRY-ON ---
export const virtualTryOn = async (userImageBase64: string, clothingImageBase64: string, prompt: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [
                { inlineData: { mimeType: 'image/jpeg', data: userImageBase64 } },
                { inlineData: { mimeType: 'image/png', data: clothingImageBase64 } },
                { text: `Take the clothing item from the second image and realistically overlay it onto the person in the first image. ${prompt}. Ensure the clothing fits the person's body shape naturally.` },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            return part.inlineData.data;
        }
    }

    throw new Error("No image was generated by the model.");
};

// --- COORDINATED OUTFITS ---
const coordinatedOutfitsSchema = {
    type: Type.ARRAY,
    items: {
        type: Type.OBJECT,
        properties: {
            occasion: { type: Type.STRING },
            reason: { type: Type.STRING },
            userA_outfit: { type: Type.ARRAY, items: { type: Type.STRING, description: "The exact name of an item from User A's wardrobe." } },
            userB_outfit: { type: Type.ARRAY, items: { type: Type.STRING, description: "The exact name of an item from User B's wardrobe." } },
        }
    }
};

export const getCoordinatedOutfits = async (wardrobeA: OutfitItem[], wardrobeB: OutfitItem[]): Promise<any[]> => {
    const wardrobeADescription = wardrobeA.map(item => `'${item.name}' (${item.category})`).join(', ');
    const wardrobeBDescription = wardrobeB.map(item => `'${item.name}' (${item.category})`).join(', ');

    const prompt = `
        You are a fashion coordinator. User A's wardrobe has these items: [${wardrobeADescription}]. 
        User B's wardrobe has these items: [${wardrobeBDescription}].
        Suggest three coordinated outfits for them to wear together for different occasions (e.g., casual day out, dinner date, etc.). 
        For each suggestion, provide the occasion, a reason why the outfits complement each other, and a list of item names for each user's outfit.
        IMPORTANT: The item names in the 'userA_outfit' and 'userB_outfit' arrays MUST EXACTLY MATCH the item names provided in their respective wardrobes. Do not invent new items.
        Respond in the requested JSON format.
    `;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: coordinatedOutfitsSchema,
        },
    });
    
    const jsonText = response.text.trim();
    return JSON.parse(jsonText);
};

// --- SURPRISE ME OUTFIT ---
const singleSuggestionSchema = {
    type: Type.OBJECT,
    properties: {
        id: { type: Type.STRING },
        title: { type: Type.STRING },
        reason: { type: Type.STRING },
        items: {
          type: Type.ARRAY,
          items: {
            type: Type.OBJECT,
            properties: {
              name: { type: Type.STRING },
              category: { type: Type.STRING, enum: ['top', 'bottom', 'dress', 'outerwear', 'accessory', 'shoes', 'jewelry', 'watch', 'hairstyle'] }
            }
          }
        }
    }
};

export const getSurpriseOutfit = async (wardrobe: OutfitItem[]): Promise<AISuggestion> => {
    const wardrobeDescription = wardrobe.map(item => `'${item.name}' (${item.category})`).join(', ');
    const prompt = `You are an AI fashion stylist. From the following wardrobe items: [${wardrobeDescription}], create one unique and stylish "surprise" outfit. It should be a creative combination the user might not have thought of. Provide a catchy title, a reason for the pairing, and the list of items. Respond in the requested JSON format.`;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: singleSuggestionSchema,
        },
    });

    const jsonText = response.text.trim();
    const suggestion = JSON.parse(jsonText) as Omit<AISuggestion, 'id'>;
    return { ...suggestion, id: crypto.randomUUID() };
};